#!/usr/bin/ruby
#
# Author: David Su√°rez <david.sephirot@gmail.com>
# Date: Sat, 04 Jan 2014 15:01:40 +0100
#

$:.unshift File.join(File.dirname(__FILE__), '..', 'lib')

require 'optparse'
require 'cloud-tools'
require 'cloud-tools/tasks'

$setname=nil

CloudTools::Config.load

tasks_options = {}
mixed_options = {}

options = OptionParser::new do |opts|
  opts.banner = "Usage: ./generate-tasks ( -miluc --no-arch-all --include FILE --exclude FILE -s setname )"
  opts.separator ""
  opts.separator "Options:"

  opts.separator "  globals:"
  opts.on("-m", "--mode MODE") { |m|
    tasks_options[:modes] = [] unless tasks_options[:modes]
    tasks_options[:modes] << m
  }
  opts.on("-i", "--id TEXT")         { |t| tasks_options[:log_id] = t }

  opts.on("", "--no-arch-all")       { tasks_options[:noall] = true }
  opts.on("-l", "--time-lower TIME") { |t| tasks_options[:time_lower] = t.to_i }
  opts.on("-u", "--time-upper TIME") { |t| tasks_options[:time_upper] = t.to_i }
  opts.on("-c", "--chroot CHROOT")   { |t| tasks_options[:chroot] = t }
  opts.on("", "--include FILE")      { |t| tasks_options[:pkgs_include] = IO::read(t).split }
  opts.on("", "--exclude FILE")      { |t| tasks_options[:pkgs_exclude] = IO::read(t).split }

  opts.separator ""
  opts.separator "  sets:"
  opts.on("-s", "--set BUILD_SET", "Predefined set of build nodes") do |s|
    $setname = s
  end
  opts.on("-l", "--list", "List of predefined sets") do 
    puts "List of predefined sets of nodes:"
    CloudTools::Config.sets.each_value { |s| puts CloudTools::pretty_print_set s }
    exit
  end

  opts.separator ""
  opts.separator "  mixed sets:"
  opts.on("", "--mode_mix1 MODE") { |m|
    mixed_options[:modes_mix1] = [] unless mixed_options[:modes_mix1]
    mixed_options[:modes_mix1] << m
  }
  opts.on("", "--id_mix1 TEXT")         { |t| mixed_options[:log_id_mix1] = t }

  opts.on("", "--mode_mix2 MODE") { |m|
    mixed_options[:modes_mix2] = [] unless mixed_options[:modes_mix2]
    mixed_options[:modes_mix2] << m
  }
  opts.on("", "--id_mix2 TEXT")         { |t| mixed_options[:log_id_mix2] = t }
end
options.parse!(ARGV)

instances = CloudTools::Config.sets[$setname] if $setname

# exit if a set is requested but we can't get his definition in the config
if not instances and $setname
  puts "error: unknown set specified" 
  exit 1
end

# if not set defined, we try to build a custom one from the commandline
if not instances
  if tasks_options.empty?
    puts "error: bad argument count, use -h for help"
    exit 2
  end
end

puts "generating tasks"

tasksGen = CloudTools::TasksGenerator.new

if instances
  tasks = tasksGen.from_buildset(instances, tasks_options, mixed_options)
else
  tasks = tasksGen.generate(tasks_options)
  tasksGen.write_json(tasks, "tasks.json")
end

exit 0
