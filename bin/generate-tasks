#!/usr/bin/ruby
#
# Author: David Su√°rez <david.sephirot@gmail.com>
# Date: Sat, 04 Jan 2014 15:01:40 +0100
#

$:.unshift File.join(File.dirname(__FILE__), '..', 'lib')

require 'json'

require 'optparse'
require 'cloud-tools'
require 'cloud-tools/recipe'
require 'cloud-tools/generator/tasks'

$recipe=nil
$outfile=nil

CloudTools::Config.load

tasks_options = {}
mixed_options = {}

options = OptionParser::new do |opts|
  opts.banner = "Usage: ./generate-tasks ( -miluc --no-arch-all --include FILE --exclude FILE -o file)"
  opts.banner = "Usage: ./generate-tasks -s setname [modificator]"
  opts.separator ""
  opts.separator "Options:"

  opts.on("-w", "--write FILE", "Write tasks to FILE (print to stdout if not given") { |w| $outfile = w }

  opts.separator "  globals:"
  opts.on("-m", "--mode MODE") { |m|
    tasks_options[:modes] = [] unless tasks_options[:modes]
    tasks_options[:modes] << m
  }
  opts.on("-i", "--id TEXT")         { |t| tasks_options[:log_id] = t }

  opts.on("", "--no-arch-all")       { tasks_options[:noall] = true }
  opts.on("-l", "--time-lower TIME") { |t| tasks_options[:time_lower] = t.to_i }
  opts.on("-u", "--time-upper TIME") { |t| tasks_options[:time_upper] = t.to_i }
  opts.on("-c", "--chroot CHROOT")   { |t| tasks_options[:chroot] = t }
  opts.on("", "--include FILE")      { |t| tasks_options[:pkgs_include] = IO::read(t).split }
  opts.on("", "--exclude FILE")      { |t| tasks_options[:pkgs_exclude] = IO::read(t).split }

  opts.separator ""
  opts.separator "  recipes:"
  opts.on("-r", "--recipe RECIPE", "Use recipe") do |r|
    $recipe = r
  end
  opts.on("-l", "--list", "List of know recipes") do
    puts "List of know recipes:"
    puts ""

    CloudTools::Config.recipes.each_value do |r|
      recipe = CloudTools::Recipe.load r
      CloudTools.pretty_recipe recipe
    end
    exit
  end

  opts.separator ""
  opts.separator "  mixed sets:"
  opts.on("", "--mode_mix1 MODE") { |m|
    mixed_options[:modes_mix1] = [] unless mixed_options[:modes_mix1]
    mixed_options[:modes_mix1] << m
  }
  opts.on("", "--id_mix1 TEXT")         { |t| mixed_options[:log_id_mix1] = t }

  opts.on("", "--mode_mix2 MODE") { |m|
    mixed_options[:modes_mix2] = [] unless mixed_options[:modes_mix2]
    mixed_options[:modes_mix2] << m
  }
  opts.on("", "--id_mix2 TEXT")         { |t| mixed_options[:log_id_mix2] = t }
end
options.parse!(ARGV)

recipe_name = CloudTools::Config.recipes[$recipe]

# exit if a recipe is requested but we can't get his definition in the config
if not recipe_name and $recipe
  puts "error: unknown set specified" 
  exit 1
end

# if not recipe defined, we try to build a custom one from the commandline
if not recipe_name
  if tasks_options.empty?
    puts "error: bad argument count, use -h for help"
    exit 2
  end
end

tasksGen = CloudTools::Generators::TasksGenerator.new
tasksGen.log_to_stderr() if not $outfile and not recipe_name

if recipe_name
  recipe = CloudTools::Recipe.load recipe_name
  tasks = tasksGen.from_recipe(recipe, tasks_options, mixed_options)
else
  tasks = tasksGen.from_hash(tasks_options)
  if $outfile
    tasksGen.write_json(tasks, $outfile)
  else
    STDOUT.write(JSON.pretty_generate(tasks))
  end
end

exit 0
