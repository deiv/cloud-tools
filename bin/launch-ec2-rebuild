#!/usr/bin/ruby
#
# Author:: David Su√°rez <david.sephirot@gmail.com>
# Date:: Sat, 15 Jun 2013 17:59:54 +0200
#

$:.unshift File.join(File.dirname(__FILE__), '..', 'lib')

require 'optparse'

require 'cloud-tools'
require 'cloud-tools/config'
require 'cloud-tools/recipe'
require 'cloud-tools/ec2'
require 'cloud-tools/generator/tasks'
require 'cloud-tools/masternode'

$recipe=nil
$job_id=nil
$dst_dir="/tmp"

CloudTools::Config.load

$global_task_options = {}

options = OptionParser::new do |opts|
  opts.banner = "Usage: ./launch-ec2-rebuild -r recipe -i jobid -d dir [tasks options]"
  opts.separator ""
  opts.separator "Options:"

  opts.on("-i", "--id JOB_ID", "Job id") do |i|
    $job_id = i
  end
  opts.on("-d", "--dst DIR", "Put things on DIR (logfile and buildlogs). Defaults to '/tmp'") do |d|
    $dst_dir = d
  end

  opts.separator ""
  opts.separator "  recipes:"
  opts.on("-r", "--recipe RECIPE", "Use recipe") do |r|
    $recipe = r
  end
  opts.on("-l", "--list", "List of know recipes") do
    puts "List of know recipes:"
    puts ""

    CloudTools::Config.recipes.each_value do |r|
      recipe = CloudTools::Recipe.load r
      CloudTools.pretty_recipe recipe
    end
    exit
  end

  opts.separator ""
  opts.separator "Tasks options (they take preference):"
  opts.on("-m", "--mode MODE") { |m|
    $global_task_options[:modes] = [] unless $global_task_options[:modes]
    $global_task_options[:modes] << m
  }
  opts.on("-c", "--chroot CHROOT")   { |t| $global_task_options[:chroot] = t }
  opts.on("", "--include FILE")      { |t| $global_task_options[:pkgs_include] = IO::read(t).split }
  opts.on("", "--exclude FILE")      { |t| $global_task_options[:pkgs_exclude] = IO::read(t).split }
end

options.parse!(ARGV)

recipe_name = CloudTools::Config.recipes[$recipe]

if not recipe_name
  puts "error: unknown recipe specified"
  exit 1
end

def launch_rebuild(build_set, id = nil, task_options = nil)
  build_id = "#{build_set.name}"

  tasks_file = "tasks-#{build_id}.json"
  nodes_file = "nodes-#{build_id}"

  tasks_gen = CloudTools::Generators::TasksGenerator.new
  ec2 = CloudTools::Ec2.new
  masternode = CloudTools::MasterNode.new
  
  tasks_gen.set_log_jobname build_id
  ec2.set_log_jobname build_id
  masternode.set_log_jobname build_id
    
  begin
    # generate tasks
    task_options = {} if not task_options
    task_options = task_options.merge_adding_arys $global_task_options
    tasks = tasks_gen.from_buid_set(build_set, task_options)
    tasks_gen.write_json tasks, tasks_file

    # request instances
    ec2.request_spot_instances(build_set.nodes, nodes_file)

    # scp needed files
    masternode.upload_file(tasks_file)
    masternode.upload_file(nodes_file)

    # wait for instances to boot
    masternode.wait_for_instances_to_boot(nodes_file)

    # launch masternode
    time_string = Time.now.strftime("%m-%d-%Y")
    build_id_date = "#{build_id}-#{time_string}"
    global_id = id
    global_id = build_set.name if not id
    global_id = "#{global_id}-#{time_string}"
    masternode.launch_rebuild(
      build_id,
      tasks_file,
      nodes_file,
      build_set.nodes.slots,
      "#{$dst_dir}/#{build_id_date}.log",
      "#{$dst_dir}/#{global_id}")

  rescue Exception => ex
    puts "job #{build_id} generated an exception: #{ex.message}"
    print ex.backtrace.join("\n")

  ensure
    # clean things
    masternode.clear_connections()
  end
end

recipe = CloudTools::Recipe.load recipe_name

products = recipe.cook

thread = []

products.each do |p|
  thread << Thread::new(p) do |p|
    launch_rebuild(p, recipe.name)
  end
end

# wait for threads
thread.each do |th|
  th.join
end

exit 0
